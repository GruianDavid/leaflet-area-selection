{"version":3,"sources":["B-Open.svg","../../src/utils.js","../../src/drawing-pane.js","../../src/events.js","../../src/control.js","../../src/index.js","index.js"],"names":["module","exports","toCamelCase","name","index","s","cls","additionalClasses","clsName","styles","setPosition","el","point","offset","nextPoint","Browser","DomUtil","CLICK_EVT","PANE_NAME","createPane","map","options","newNode","referenceNode","standardPanesContainer","overlayPanesContainer","fadeOnActivation","active","drawingPaneContainer","insertAfter","pane","event","removeEndClickArea","control","marker","onAddPoint","this","clientY","clientX","touch","bbox","x","y","markers","length","once","addEndClickArea","icon","className","iconSize","draggable","_onMarkerDrag","onMarkerDrag","requestAnimationFrame","newEdge","i","onAddMarker","rest","edge","enoughPoints","phase","weight","color","onRemoveMarker","splice","removed","onUpdatePolygon","polygon","dashArray","onUpdateGhostPoints","ghostMarkers","nextMarker","currentLatLng","currentMarker","nextLatLng","newGhostMarker","onGhostMarkerDrag","onGhostMarkerDragStart","onGhostMarkerDragEnd","onPolygonCreationEnd","onActivate","activeState","activateButton","classList","remove","add","latlng","newPoint","firstPoint","lastPoint","opacity","fillOpacity","target","fakeEvent","DrawAreaSelection","onPolygonReady","initialize","Util","mapMoveStart","bind","mapMoveEnd","onAdd","onRemove","getMap","setPhase","forceClear","container","_map","getPane","touchMarker","firstMarker","translatePolygon","data","hoverClosePoint","outClosePoint","clearMarkers","clearGhostMarkers","clearPolygon","removeFrom","closeLine","drawAreaSelection","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","center","Map","tap","setView","tileLayer","attribution","addTo","popup","document","createElement","innerHTML","bindPopup","areaSelection","preview","getElementById","innerText","JSON","stringify","toGeoJSON","undefined","scrollTop","scrollHeight","position","addControl"],"mappings":"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","file":"static/js/main.f4a2a3b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/B-Open.a8695c4b.svg\";","import { Browser, DomUtil } from 'leaflet/dist/leaflet-src.esm';\nimport styles from './styles.module.css';\n\nexport function toCamelCase(name) {\n  return name\n    .split('-')\n    .map((s, index) => (index === 0 ? s : `${s[0].toUpperCase()}${s.substring(1)}`))\n    .join('');\n}\n\nexport function cls(name, additionalClasses = '') {\n  const clsName = toCamelCase(name);\n  if (styles[clsName]) {\n    return additionalClasses\n      ? `${styles[clsName]} ${name} ${additionalClasses}`\n      : `${styles[clsName]} ${name}`;\n  }\n  // Fallback to just return name and maybe additional classes\n  return additionalClasses ? `${name} ${additionalClasses}` : name;\n}\n\nexport function insertAfter(newNode, referenceNode) {\n  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n}\n\n/**\n * Like original DomUtil.setPosition, but takes an optional offset\n * @param {DOMElement} el\n * @param {Point} point\n */\nexport function setPosition(el, point, offset = null) {\n  const nextPoint = offset ? point.add(offset) : point;\n  el._leaflet_pos = nextPoint;\n\n  if (Browser.any3d) {\n    DomUtil.setTransform(el, nextPoint);\n  } else {\n    el.style.left = nextPoint.x + 'px';\n    el.style.top = nextPoint.y + 'px';\n  }\n}\n\nexport const CLICK_EVT = Browser.mobile ? 'touchstart' : 'click';\n","import { DomUtil, Point } from 'leaflet/dist/leaflet-src.esm';\nimport { cls, insertAfter, setPosition, CLICK_EVT } from './utils';\n\nexport const PANE_NAME = 'area-draw-selection';\n\nfunction drawingPaneContainer(options) {\n  const { active, fadeOnActivation } = options;\n  const drawPane = DomUtil.create(\n    'div',\n    cls(\n      'leaflet-map-overlay-pane',\n      `leaflet-pane${active ? '' : ' inactive'}${fadeOnActivation ? ' fading-enabled' : ''}`\n    )\n  );\n  return drawPane;\n}\n\nexport function createPane(map, options) {\n  const standardPanesContainer = map.getContainer().querySelector('.leaflet-map-pane');\n  const overlayPanesContainer = drawingPaneContainer(options);\n  insertAfter(overlayPanesContainer, standardPanesContainer);\n  const pane = map.createPane(PANE_NAME, overlayPanesContainer);\n  const handler = (event) => {\n    // Non-sense, but required on Safari. Probably related to https://github.com/Leaflet/Leaflet/issues/7255\n    if (!event.isTrusted) {\n      return;\n    }\n    event.stopPropagation();\n    map.fire('as:point-add', event);\n  };\n  pane.addEventListener(CLICK_EVT, handler);\n  pane.style.zIndex = 550;\n}\n\nexport function addEndClickArea(control, [x, y]) {\n  const map = control.getMap();\n  const pane = map.getPane(PANE_NAME);\n  const marker = DomUtil.create('div', cls('end-selection-area'), pane);\n  const bbox = marker.getBoundingClientRect();\n  marker.setAttribute('role', 'button');\n  const handler = (event) => {\n    // Non-sense, but required on Safari. Probably related to https://github.com/Leaflet/Leaflet/issues/7255\n    if (!event.isTrusted) {\n      return;\n    }\n    event.stopPropagation();\n    map.fire('as:creation-end');\n  };\n  marker.addEventListener(CLICK_EVT, handler, {\n    once: true,\n  });\n  marker.addEventListener('mouseenter', control.hoverClosePoint.bind(control));\n  marker.addEventListener('mouseleave', control.outClosePoint.bind(control));\n  setPosition(marker, new Point(x, y), new Point(-bbox.width / 2, -bbox.height / 2));\n}\n\nexport function removeEndClickArea(control) {\n  const map = control.getMap();\n  const pane = map.getPane(PANE_NAME);\n  const marker = pane.querySelector('.end-selection-area');\n  if (marker) {\n    marker.remove();\n  }\n}\n","import { DivIcon, Marker, Point, Polygon, Polyline } from 'leaflet/dist/leaflet-src.esm';\nimport { cls } from './utils';\nimport { addEndClickArea, removeEndClickArea } from './drawing-pane';\n\n/**\n * Event handler reacting to an add point action\n * @param {MouseEvent|TouchEvent} event\n */\nexport function onAddPoint(event) {\n  // Default behavior while dragging\n  if (this.map_moving) {\n    return;\n  }\n  const { index = null } = event;\n  let { clientX, clientY } = event;\n  if (clientX === undefined && clientY === undefined) {\n    const touch = event.touches[0];\n    clientX = touch.clientX;\n    clientY = touch.clientY;\n  }\n  const map = this.getMap();\n  const container = map.getContainer();\n  const bbox = container.getBoundingClientRect();\n  const x = clientX - bbox.left;\n  const y = clientY - bbox.top;\n  if (this.markers.length === 0) {\n    // this is the first point: let's add a sensible click area on the pane too\n    addEndClickArea(this, [x, y]);\n  }\n  const point = new Point(x, y);\n  const icon = new DivIcon({\n    className: cls('area-select-marker'),\n    iconSize: [16, 16],\n  });\n  const marker = new Marker(map.containerPointToLatLng(point), {\n    icon,\n    draggable: true,\n  });\n  const _onMarkerDrag = onMarkerDrag.bind(this);\n  marker.on('drag', _onMarkerDrag(index === null ? this.markers.length : index));\n  marker.on('dragstart', (event) => {\n    event.target.getElement().classList.add('active');\n  });\n  marker.on('dragend', (event) => {\n    event.target.getElement().classList.remove('active');\n    requestAnimationFrame(() => {\n      this.onPolygonReady();\n    });\n  });\n  const newEdge = {\n    point,\n    marker,\n    index,\n  };\n  marker.on(\n    'dblclick',\n    ((length) => (event) => {\n      map.fire('as:marker-remove', {\n        ...newEdge,\n        index: index === null ? length : index,\n      });\n    })(this.markers.length)\n  );\n  marker.addTo(map);\n  map.fire('as:marker-add', newEdge);\n  // If this point as not been added at the end, we need to update even handlers HOC params to update index\n  if (index !== null) {\n    for (let i = index + 1; i < this.markers.length; i++) {\n      this.markers[i].marker.off('drag');\n      this.markers[i].marker.on('drag', _onMarkerDrag(i));\n      this.markers[i].marker.off('dblclick');\n      this.markers[i].marker.on('dblclick', (event) => {\n        map.fire('as:marker-remove', {\n          ...this.markers[i],\n          index: i,\n        });\n      });\n    }\n  }\n}\n\nexport function onAddMarker({ index = null, ...rest }) {\n  const map = this.getMap();\n  const edge = {\n    marker: rest.marker,\n    point: rest.point,\n  };\n  const { markers } = this;\n  if (index === null) {\n    markers.push(edge);\n  } else {\n    markers.splice(index, 0, edge);\n  }\n  const enoughPoints = markers.length >= 3;\n  if (this.phase === 'draw') {\n    if (!enoughPoints) {\n      markers.forEach(({ marker }) => {\n        const icon = marker.getIcon();\n        icon.options.className = cls('area-select-marker', 'invalid');\n        marker.setIcon(icon);\n      });\n    } else if (markers.length === 3) {\n      // Restore colors\n      markers.forEach(({ marker }, index) => {\n        const icon = marker.getIcon();\n        icon.options.className = cls('area-select-marker', index === 0 ? 'start-marker' : null);\n        marker.setIcon(icon);\n      });\n    }\n  }\n  map.fire('as:update-polygon');\n  if (this.phase === 'adjust') {\n    map.fire('as:update-ghost-points');\n    this.onPolygonReady();\n  }\n\n  if (this.phase === 'draw') {\n    // close line\n    if (this.closeLine) {\n      map.removeLayer(this.closeLine);\n    }\n    if (enoughPoints) {\n      this.closeLine = new Polyline(\n        [markers[0].marker.getLatLng(), markers[markers.length - 1].marker.getLatLng()],\n        {\n          weight: 3,\n          color: '#c0c0c0',\n        }\n      );\n      map.addLayer(this.closeLine);\n    }\n  }\n}\n\nexport function onRemoveMarker({ index = 0 }) {\n  const map = this.getMap();\n  const { markers } = this;\n  const enoughPoints = markers.length > 3;\n  if (!enoughPoints) {\n    return;\n  }\n  const removed = this.markers.splice(index || 0, 1);\n  removed[0].marker.removeFrom(map);\n  map.fire('as:update-polygon');\n  if (this.phase === 'adjust') {\n    map.fire('as:update-ghost-points');\n  }\n  for (let i = index; i < this.markers.length; i++) {\n    this.markers[i].marker.off('drag');\n    this.markers[i].marker.on('drag', onMarkerDrag.bind(this)(i));\n    this.markers[i].marker.off('dblclick');\n    this.markers[i].marker.on('dblclick', (event) => {\n      map.fire('as:marker-remove', {\n        ...this.markers[i],\n        index: i,\n      });\n    });\n  }\n  this.onPolygonReady();\n}\n\n/**\n * Refresh the polygon on the map\n */\nexport function onUpdatePolygon() {\n  const map = this.getMap();\n  const { markers } = this;\n  const enoughPoints = markers.length >= 3;\n  const polygon = new Polygon(\n    markers.map(({ marker }) => {\n      return marker.getLatLng();\n      // return map.containerPointToLatLng(point);\n    }),\n    {\n      color: enoughPoints ? 'rgb(45, 123, 200)' : 'rgba(220, 53, 69, 0.7)',\n      weight: 2,\n      ...(!enoughPoints && { dashArray: '5, 10' }),\n    }\n  );\n  if (this.polygon) {\n    map.removeLayer(this.polygon);\n  }\n  this.polygon = polygon;\n  map.addLayer(this.polygon);\n}\n\nexport function onUpdateGhostPoints() {\n  const map = this.getMap();\n  requestAnimationFrame(() => {\n    this.clearGhostMarkers();\n    const { markers, ghostMarkers } = this;\n    markers.forEach((currentMarker, index) => {\n      const nextMarker = markers[index + 1] ? markers[index + 1] : markers[0];\n      const currentLatLng = currentMarker.marker.getLatLng();\n      const nextLatLng = nextMarker.marker.getLatLng();\n      const point = map.latLngToContainerPoint([\n        (currentLatLng.lat + nextLatLng.lat) / 2,\n        (currentLatLng.lng + nextLatLng.lng) / 2,\n      ]);\n\n      const icon = new DivIcon({\n        className: cls('area-select-ghost-marker'),\n        iconSize: [16, 16],\n      });\n      const marker = new Marker(map.containerPointToLatLng(point), {\n        icon,\n        draggable: true,\n      });\n      const newGhostMarker = {\n        point,\n        marker,\n      };\n      marker.on('drag', onGhostMarkerDrag.bind(this)(ghostMarkers.length));\n      marker.on('dragstart', onGhostMarkerDragStart.bind(this)());\n      marker.on('dragend', onGhostMarkerDragEnd.bind(this)(ghostMarkers.length));\n      ghostMarkers.push(newGhostMarker);\n      marker.addTo(map);\n    });\n  });\n}\n\nexport function onPolygonCreationEnd() {\n  const map = this.getMap();\n  map.removeLayer(this.closeLine);\n  this.closeLine = null;\n  // Remove style for the final marker icon\n  this.markers[0].marker.getElement().classList.remove('start-marker');\n  this.setPhase('adjust');\n  map.fire('as:update-ghost-points');\n  this.onPolygonReady();\n  removeEndClickArea(this);\n}\n\nexport function onActivate(event) {\n  // Non-sense, but required on Safari. Probably related to https://github.com/Leaflet/Leaflet/issues/7255\n  if (!event.isTrusted) {\n    return;\n  }\n  event.preventDefault();\n  event.target.blur();\n  // if current state is active, we need to deactivate\n  const activeState = this.options.active || this.phase === 'adjust';\n  if (activeState) {\n    removeEndClickArea(this);\n  }\n  activeState\n    ? this.activateButton.classList.remove('active')\n    : this.activateButton.classList.add('active');\n  this.setPhase(activeState ? 'inactive' : 'draw', true);\n}\n\nexport function onMarkerDrag(index) {\n  const map = this.getMap();\n  return (event) => {\n    const { latlng } = event;\n    requestAnimationFrame(() => {\n      const newPoint = map.latLngToContainerPoint(latlng);\n      const { point } = this.markers[index];\n      point.x = newPoint.x;\n      point.y = newPoint.y;\n      map.fire('as:update-polygon');\n      map.fire('as:update-ghost-points');\n    });\n  };\n}\n\nexport function onGhostMarkerDrag(index) {\n  const map = this.getMap();\n  return (event) => {\n    const { latlng } = event;\n    requestAnimationFrame(() => {\n      // Given a ghost point, markers to be used as edges are the one at +0 and +1\n      const firstPoint = this.markers[index];\n      const lastPoint = this.markers[index + 1] ? this.markers[index + 1] : this.markers[0];\n      if (this.ghostPolygon) {\n        map.removeLayer(this.ghostPolygon);\n      }\n      this.ghostPolygon = new Polygon(\n        [\n          map.containerPointToLatLng(firstPoint.point),\n          latlng,\n          map.containerPointToLatLng(lastPoint.point),\n        ],\n        {\n          color: 'rgb(45, 123, 200)',\n          weight: 2,\n          opacity: 0.5,\n          fillOpacity: 0.1,\n          dashArray: '5, 10',\n        }\n      );\n      map.addLayer(this.ghostPolygon);\n      map.fire('as:update-polygon');\n    });\n  };\n}\n\nexport function onGhostMarkerDragStart() {\n  return (event) => {\n    event.target.getElement().classList.add('active');\n  };\n}\n\nexport function onGhostMarkerDragEnd(index) {\n  const map = this.getMap();\n  return (event) => {\n    const { target } = event;\n    target.getElement().classList.remove('active');\n    target.removeFrom(map);\n    if (this.ghostPolygon) {\n      map.removeLayer(this.ghostPolygon);\n    }\n    const newPoint = map.latLngToContainerPoint(target.getLatLng());\n    const fakeEvent = {\n      clientX: newPoint.x,\n      clientY: newPoint.y,\n      index: index + 1,\n    };\n    map.fire('as:point-add', fakeEvent);\n  };\n}\n","import { DomUtil, Control, Util, Point } from 'leaflet/dist/leaflet-src.esm';\nimport { createPane, PANE_NAME } from './drawing-pane';\nimport { cls, setPosition, CLICK_EVT } from './utils';\nimport {\n  onActivate,\n  onAddMarker,\n  onAddPoint,\n  onPolygonCreationEnd,\n  onRemoveMarker,\n  onUpdateGhostPoints,\n  onUpdatePolygon,\n} from './events';\n\nexport const DrawAreaSelection = Control.extend({\n  options: {\n    // activate automatically area selection on plugin load\n    active: false,\n    // callback called when draw phase is complete and at every polygon adjustement\n    onPolygonReady: (polygon) => {},\n    // partially fade the map when draw phase is activated\n    fadeOnActivation: true,\n  },\n\n  initialize: function (options = {}) {\n    Util.setOptions(this, options);\n    // lifecycle phases: one of inactive, draw, adjust\n    this.phase = options.active ? 'draw' : 'inactive';\n    this.map_moving = false;\n    // edge markers used for drawing, next dragging the polygon\n    this.markers = [];\n    // fake markers used for adding rings to the polygon\n    this.ghostMarkers = [];\n    // The actual polygon draw\n    this.polygon = null;\n    // on drawing phase: a line from the last drawn point to the first ones\n    this.closeLine = null;\n\n    this._mapMoveStart = this.mapMoveStart.bind(this);\n    this._mapMoveEnd = this.mapMoveEnd.bind(this);\n  },\n\n  onAdd: function (map) {\n    this._container = DomUtil.create('div', cls('leaflet-area-selector-control'));\n    this.activateButton = DomUtil.create('button', '', this._container);\n    this.activateButton.addEventListener(CLICK_EVT, onActivate.bind(this));\n    this.activateButton.addEventListener('dblclick', (event) => {\n      event.stopPropagation();\n    });\n    this.options.active\n      ? this.activateButton.classList.add('active')\n      : this.activateButton.classList.remove('active');\n    this._map = map;\n    createPane(map, this.options);\n    map.on('movestart', this._mapMoveStart);\n    map.on('moveend', this._mapMoveEnd);\n    map.on('as:point-add', onAddPoint.bind(this));\n    map.on('as:marker-add', onAddMarker.bind(this));\n    map.on('as:marker-remove', onRemoveMarker.bind(this));\n    map.on('as:creation-end', onPolygonCreationEnd.bind(this));\n    map.on('as:update-polygon', onUpdatePolygon.bind(this));\n    map.on('as:update-ghost-points', onUpdateGhostPoints.bind(this));\n    return this._container;\n  },\n\n  onRemove: function (map) {\n    map.off('movestart', this._mapMoveStart);\n    map.off('moveend', this._mapMoveEnd);\n    map.off('as:point-add');\n    map.off('as:marker-add');\n    map.off('as:marker-remove');\n    map.off('as:creation-end');\n    map.off('as:update-polygon');\n    map.off('as:update-ghost-points');\n  },\n\n  getMap: function () {\n    return this._map;\n  },\n\n  onPolygonReady: function () {\n    this.options.onPolygonReady(this.polygon);\n  },\n\n  setPhase(phase, forceClear = false) {\n    this.phase = phase;\n    this.options.active = phase === 'draw';\n    // If we didn't finished to fill a polygon, let's clear all\n    if (forceClear || this.phase === 'draw') {\n      this.clearGhostMarkers();\n      this.clearMarkers();\n      this.clearPolygon();\n    }\n    const pane = this._map.getPane(PANE_NAME);\n    const container = pane.parentNode;\n    this.options.active\n      ? container.classList.remove('inactive')\n      : container.classList.add('inactive');\n  },\n\n  mapMoveStart: function () {\n    this.map_moving = true;\n  },\n\n  mapMoveEnd: function (event) {\n    requestAnimationFrame(() => {\n      this.map_moving = false;\n    });\n    const map = this._map;\n    // Re-position end of selection HTML element\n    const pane = map.getPane(PANE_NAME);\n    const touchMarker = pane.querySelector('.end-selection-area');\n    if (touchMarker) {\n      const firstMarker = this.markers[0].marker;\n      const bbox = touchMarker.getBoundingClientRect();\n      const point = map.latLngToContainerPoint(firstMarker.getLatLng());\n      setPosition(touchMarker, point, new Point(-bbox.width / 2, -bbox.height / 2));\n    }\n    this.translatePolygon();\n  },\n\n  translatePolygon: function () {\n    if (this.markers.length === 0) {\n      return;\n    }\n    const map = this._map;\n    this.markers.forEach((data) => {\n      data.point = map.latLngToContainerPoint(data.marker.getLatLng());\n    });\n    this.ghostMarkers.forEach((data) => {\n      data.point = map.latLngToContainerPoint(data.marker.getLatLng());\n    });\n  },\n\n  hoverClosePoint: function (event) {\n    if (this.markers.length > 2 && this.closeLine) {\n      this.closeLine.removeFrom(this._map);\n    }\n  },\n\n  outClosePoint: function (event) {\n    if (this.closeLine) {\n      this.closeLine.addTo(this._map);\n    }\n  },\n\n  clearMarkers: function () {\n    this.markers.forEach(({ marker }) => {\n      marker.removeFrom(this._map);\n    });\n    this.markers = [];\n  },\n\n  clearGhostMarkers: function () {\n    this.ghostMarkers.forEach(({ marker }) => {\n      marker.removeFrom(this._map);\n    });\n    this.ghostMarkers = [];\n  },\n\n  clearPolygon: function () {\n    this.polygon && this.polygon.removeFrom(this._map);\n    this.polygon = null;\n    this.closeLine && this.closeLine.removeFrom(this._map);\n    this.closeLine = null;\n  },\n});\n\nexport const drawAreaSelection = function (options = {}) {\n  return new DrawAreaSelection(options);\n};\n","import { Util, Control } from 'leaflet/dist/leaflet-src.esm';\nimport { DrawAreaSelection, drawAreaSelection } from './control';\n\nUtil.extend(Control, {\n  DrawAreaSelection,\n  drawAreaSelection,\n});\n\nexport { DrawAreaSelection, drawAreaSelection };\n","import { Map, Icon, tileLayer, marker } from 'leaflet/dist/leaflet-src.esm';\nimport 'leaflet/dist/leaflet.css';\nimport '@bopen/leaflet-area-selection/dist/index.css';\nimport { DrawAreaSelection } from '@bopen/leaflet-area-selection';\n\nimport './index.css';\n\nimport icon from './B-Open.svg';\n\n// See https://github.com/Leaflet/Leaflet/issues/4968#issuecomment-483402699\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nconst center = [41.901493, 12.5009157];\n\nconst map = new Map('root', {\n  // Fix for a bug in Leaflet 1.7.1. See https://github.com/Leaflet/Leaflet/issues/7255\n  tap: false,\n}).setView(center, 13);\n\ntileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  attribution:\n    '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n}).addTo(map);\n\nconst popup = document.createElement('div');\npopup.innerHTML = `<div style=\"text-align: center; font-size: 120%\">B-Open</div>\n<img alt=\"B-Open logo\" width=\"75\" src=\"${icon}\" />\n`;\n\nmarker(center).addTo(map).bindPopup(popup);\n\nconst areaSelection = new DrawAreaSelection({\n  onPolygonReady: (polygon) => {\n    const preview = document.getElementById('polygon');\n    preview.innerText = JSON.stringify(polygon.toGeoJSON(3), undefined, 2);\n    preview.scrollTop = preview.scrollHeight;\n  },\n  position: 'bottomleft',\n});\n\nmap.addControl(areaSelection);\n"],"sourceRoot":""}