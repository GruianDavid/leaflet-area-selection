{"version":3,"sources":["B-Open.svg","../../src/utils.js","../../src/drawing-pane.js","../../src/events.js","../../src/control.js","../../src/index.js","index.js"],"names":["module","exports","cls","name","additionalClasses","clsName","index","s","toCamelCase","styles","setPosition","el","point","offset","nextPoint","Browser","DomUtil","CLICK_EVT","PANE_NAME","createPane","map","options","newNode","referenceNode","standardPanesContainer","overlayPanesContainer","active","fadeOnActivation","drawingPaneContainer","insertAfter","pane","event","removeEndClickArea","control","marker","doNothingHandler","onAddPoint","this","clientX","clientY","touch","bbox","x","y","markers","length","once","addEndClickArea","icon","className","iconSize","draggable","_onMarkerDrag","onMarkerDrag","requestAnimationFrame","newEdge","i","onAddMarker","rest","edge","enoughPoints","phase","weight","color","onRemoveMarker","splice","removed","onUpdatePolygon","polygon","dashArray","DomEvent","onUpdateGhostPoints","ghostMarkers","nextMarker","currentLatLng","currentMarker","nextLatLng","newGhostMarker","onGhostMarkerDrag","onGhostMarkerDragStart","onGhostMarkerDragEnd","onPolygonCreationEnd","onActivate","latlng","newPoint","firstPoint","lastPoint","opacity","fillOpacity","target","fakeEvent","DrawAreaSelection","onPolygonReady","onPolygonDblClick","initialize","Util","mapMoveStart","bind","mapMoveEnd","onAdd","activateButton","classList","add","remove","onRemove","getMap","setPhase","forceClear","container","_map","getPane","touchMarker","firstMarker","translatePolygon","data","hoverClosePoint","outClosePoint","clearMarkers","clearGhostMarkers","clearPolygon","removeFrom","closeLine","deactivate","drawAreaSelection","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","center","Map","tap","setView","tileLayer","attribution","addTo","popup","document","createElement","innerHTML","bindPopup","areaSelection","preview","getElementById","innerText","JSON","stringify","toGeoJSON","undefined","scrollTop","scrollHeight","ev","geoJSON","style","position","addControl"],"mappings":"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","file":"static/js/main.89609ba2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/B-Open.a8695c4b.svg\";","import { Browser, DomUtil } from 'leaflet';\nimport styles from './styles.module.css';\n\nexport function toCamelCase(name) {\n  return name\n    .split('-')\n    .map((s, index) => (index === 0 ? s : `${s[0].toUpperCase()}${s.substring(1)}`))\n    .join('');\n}\n\nexport function cls(name, additionalClasses = '') {\n  const clsName = toCamelCase(name);\n  if (styles[clsName]) {\n    return additionalClasses\n      ? `${styles[clsName]} ${name} ${additionalClasses}`\n      : `${styles[clsName]} ${name}`;\n  }\n  // Fallback to just return name and maybe additional classes\n  return additionalClasses ? `${name} ${additionalClasses}` : name;\n}\n\nexport function insertAfter(newNode, referenceNode) {\n  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n}\n\n/**\n * Like original DomUtil.setPosition, but takes an optional offset\n * @param {DOMElement} el\n * @param {Point} point\n */\nexport function setPosition(el, point, offset = null) {\n  const nextPoint = offset ? point.add(offset) : point;\n  el._leaflet_pos = nextPoint;\n\n  if (Browser.any3d) {\n    DomUtil.setTransform(el, nextPoint);\n  } else {\n    el.style.left = nextPoint.x + 'px';\n    el.style.top = nextPoint.y + 'px';\n  }\n}\n\nexport const CLICK_EVT = Browser.mobile ? 'touchstart' : 'click';\n","import { DomUtil, Point } from 'leaflet';\nimport { cls, insertAfter, setPosition, CLICK_EVT } from './utils';\n\nexport const PANE_NAME = 'area-draw-selection';\n\nfunction drawingPaneContainer(options) {\n  const { active, fadeOnActivation } = options;\n  const drawPane = DomUtil.create(\n    'div',\n    cls(\n      'leaflet-map-overlay-pane',\n      `leaflet-pane${active ? '' : ' inactive'}${fadeOnActivation ? ' fading-enabled' : ''}`\n    )\n  );\n  return drawPane;\n}\n\nexport function createPane(map, options) {\n  const standardPanesContainer = map.getContainer().querySelector('.leaflet-map-pane');\n  const overlayPanesContainer = drawingPaneContainer(options);\n  insertAfter(overlayPanesContainer, standardPanesContainer);\n  const pane = map.createPane(PANE_NAME, overlayPanesContainer);\n  const handler = (event) => {\n    // Non-sense, but required on Safari. Probably related to https://github.com/Leaflet/Leaflet/issues/7255\n    if (!event.isTrusted) {\n      return;\n    }\n    event.stopPropagation();\n    map.fire('as:point-add', event);\n  };\n  pane.addEventListener(CLICK_EVT, handler);\n}\n\nexport function addEndClickArea(control, [x, y]) {\n  const map = control.getMap();\n  const pane = map.getPane(PANE_NAME);\n  const marker = DomUtil.create('div', cls('end-selection-area'), pane);\n  const bbox = marker.getBoundingClientRect();\n  marker.setAttribute('role', 'button');\n  const handler = (event) => {\n    // Non-sense, but required on Safari. Probably related to https://github.com/Leaflet/Leaflet/issues/7255\n    if (!event.isTrusted) {\n      return;\n    }\n    event.stopPropagation();\n    map.fire('as:creation-end');\n  };\n  marker.addEventListener(CLICK_EVT, handler, {\n    once: true,\n  });\n  marker.addEventListener('mouseenter', control.hoverClosePoint.bind(control));\n  marker.addEventListener('mouseleave', control.outClosePoint.bind(control));\n  setPosition(marker, new Point(x, y), new Point(-bbox.width / 2, -bbox.height / 2));\n}\n\nexport function removeEndClickArea(control) {\n  const map = control.getMap();\n  const pane = map.getPane(PANE_NAME);\n  const marker = pane.querySelector('.end-selection-area');\n  if (marker) {\n    marker.remove();\n  }\n}\n","import { DivIcon, Marker, Point, Polygon, Polyline, DomEvent } from 'leaflet';\nimport { cls } from './utils';\nimport { addEndClickArea, removeEndClickArea } from './drawing-pane';\n\nfunction doNothingHandler(event) {\n  event.originalEvent.preventDefault();\n  event.originalEvent.stopPropagation();\n}\n\n/**\n * Event handler reacting to an add point action\n * @param {MouseEvent|TouchEvent} event\n */\nexport function onAddPoint(event) {\n  // Default behavior while dragging\n  if (this.map_moving) {\n    return;\n  }\n  const { index = null } = event;\n  let { clientX, clientY } = event;\n  // Touch device\n  if (clientX === undefined && clientY === undefined) {\n    const touch = event.touches[0];\n    clientX = touch.clientX;\n    clientY = touch.clientY;\n  }\n  const map = this.getMap();\n  const container = map.getContainer();\n  const bbox = container.getBoundingClientRect();\n  const x = clientX - bbox.left;\n  const y = clientY - bbox.top;\n  if (this.markers.length === 0) {\n    // this is the first point: let's add a sensible click area on the pane too\n    addEndClickArea(this, [x, y]);\n  }\n  const point = new Point(x, y);\n  const icon = new DivIcon({\n    className: cls('area-select-marker'),\n    iconSize: [16, 16],\n  });\n  const marker = new Marker(map.containerPointToLatLng(point), {\n    icon,\n    draggable: true,\n  });\n  const _onMarkerDrag = onMarkerDrag.bind(this);\n  marker.on('drag', _onMarkerDrag(index === null ? this.markers.length : index));\n  marker.on('dragstart', (event) => {\n    event.target.getElement().classList.add('active');\n  });\n  marker.on('dragend', (event) => {\n    event.target.getElement().classList.remove('active');\n    requestAnimationFrame(() => {\n      this.onPolygonReady();\n    });\n  });\n  const newEdge = {\n    point,\n    marker,\n    index,\n  };\n  marker.on(\n    'dblclick',\n    ((length) => (event) => {\n      event.originalEvent.stopPropagation();\n      map.fire('as:marker-remove', {\n        ...newEdge,\n        index: index === null ? length : index,\n      });\n    })(this.markers.length)\n  );\n  marker.on('click', doNothingHandler);\n  marker.addTo(map);\n  map.fire('as:marker-add', newEdge);\n  // If this point as not been added at the end, we need to update even handlers HOC params to update index\n  if (index !== null) {\n    for (let i = index + 1; i < this.markers.length; i++) {\n      this.markers[i].marker.off('drag');\n      this.markers[i].marker.on('drag', _onMarkerDrag(i));\n      this.markers[i].marker.off('click');\n      this.markers[i].marker.on('click', doNothingHandler);\n      this.markers[i].marker.off('dblclick');\n      this.markers[i].marker.on('dblclick', (event) => {\n        map.fire('as:marker-remove', {\n          ...this.markers[i],\n          index: i,\n        });\n      });\n    }\n  }\n}\n\nexport function onAddMarker({ index = null, ...rest }) {\n  const map = this.getMap();\n  const edge = {\n    marker: rest.marker,\n    point: rest.point,\n  };\n  const { markers } = this;\n  if (index === null) {\n    markers.push(edge);\n  } else {\n    markers.splice(index, 0, edge);\n  }\n  const enoughPoints = markers.length >= 3;\n  if (this.phase === 'draw') {\n    if (!enoughPoints) {\n      markers.forEach(({ marker }) => {\n        const icon = marker.getIcon();\n        icon.options.className = cls('area-select-marker', 'invalid');\n        marker.setIcon(icon);\n      });\n    } else if (markers.length === 3) {\n      // Restore colors\n      markers.forEach(({ marker }, index) => {\n        const icon = marker.getIcon();\n        icon.options.className = cls('area-select-marker', index === 0 ? 'start-marker' : null);\n        marker.setIcon(icon);\n      });\n    }\n  }\n  map.fire('as:update-polygon');\n  if (this.phase === 'adjust') {\n    map.fire('as:update-ghost-points');\n    this.onPolygonReady();\n  }\n\n  if (this.phase === 'draw') {\n    // close line\n    if (this.closeLine) {\n      map.removeLayer(this.closeLine);\n    }\n    if (enoughPoints) {\n      this.closeLine = new Polyline(\n        [markers[0].marker.getLatLng(), markers[markers.length - 1].marker.getLatLng()],\n        {\n          weight: 3,\n          color: '#c0c0c0',\n        }\n      );\n      map.addLayer(this.closeLine);\n    }\n  }\n}\n\nexport function onRemoveMarker({ index = 0 }) {\n  const map = this.getMap();\n  const { markers } = this;\n  const enoughPoints = markers.length > 3;\n  if (!enoughPoints) {\n    return;\n  }\n  const removed = this.markers.splice(index || 0, 1);\n  removed[0].marker.removeFrom(map);\n  map.fire('as:update-polygon');\n  if (this.phase === 'adjust') {\n    map.fire('as:update-ghost-points');\n  }\n  for (let i = index; i < this.markers.length; i++) {\n    this.markers[i].marker.off('drag');\n    this.markers[i].marker.on('drag', onMarkerDrag.bind(this)(i));\n    this.markers[i].marker.off('click');\n    this.markers[i].marker.on('click', doNothingHandler);\n    this.markers[i].marker.off('dblclick');\n    this.markers[i].marker.on('dblclick', (event) => {\n      event.originalEvent.stopPropagation();\n      map.fire('as:marker-remove', {\n        ...this.markers[i],\n        index: i,\n      });\n    });\n  }\n  this.onPolygonReady();\n}\n\n/**\n * Refresh the polygon on the map\n */\nexport function onUpdatePolygon() {\n  const map = this.getMap();\n  const { markers } = this;\n  const enoughPoints = markers.length >= 3;\n  const polygon = new Polygon(\n    markers.map(({ marker }) => {\n      return marker.getLatLng();\n      // return map.containerPointToLatLng(point);\n    }),\n    {\n      color: enoughPoints ? 'rgb(45, 123, 200)' : 'rgba(220, 53, 69, 0.7)',\n      weight: 2,\n      ...(!enoughPoints && { dashArray: '5, 10' }),\n      className: 'drawing-area-poligon',\n    }\n  );\n  polygon.on('click', (ev) => {\n    DomEvent.stopPropagation(ev);\n  });\n\n  polygon.on('dblclick', (ev) => {\n    // Preventing zoom-on-doubleclick is not working. I'll leave hacky workarounds to user's implementation\n    // See https://stackoverflow.com/questions/15406537/disable-map-zoom-on-circlemarker-double-click-in-leaflet\n    DomEvent.stopPropagation(ev);\n    this.onPolygonDblClick(ev);\n    return false;\n  });\n  if (this.polygon) {\n    map.removeLayer(this.polygon);\n  }\n  this.polygon = polygon;\n  map.addLayer(this.polygon);\n}\n\nexport function onUpdateGhostPoints() {\n  const map = this.getMap();\n  requestAnimationFrame(() => {\n    this.clearGhostMarkers();\n    const { markers, ghostMarkers } = this;\n    markers.forEach((currentMarker, index) => {\n      const nextMarker = markers[index + 1] ? markers[index + 1] : markers[0];\n      const currentLatLng = currentMarker.marker.getLatLng();\n      const nextLatLng = nextMarker.marker.getLatLng();\n      const point = map.latLngToContainerPoint([\n        (currentLatLng.lat + nextLatLng.lat) / 2,\n        (currentLatLng.lng + nextLatLng.lng) / 2,\n      ]);\n\n      const icon = new DivIcon({\n        className: cls('area-select-ghost-marker'),\n        iconSize: [16, 16],\n      });\n      const marker = new Marker(map.containerPointToLatLng(point), {\n        icon,\n        draggable: true,\n      });\n      const newGhostMarker = {\n        point,\n        marker,\n      };\n      marker.on('click', doNothingHandler);\n      marker.on('dblclick', doNothingHandler);\n      marker.on('drag', onGhostMarkerDrag.bind(this)(ghostMarkers.length));\n      marker.on('dragstart', onGhostMarkerDragStart.bind(this)());\n      marker.on('dragend', onGhostMarkerDragEnd.bind(this)(ghostMarkers.length));\n      ghostMarkers.push(newGhostMarker);\n      marker.addTo(map);\n    });\n  });\n}\n\nexport function onPolygonCreationEnd() {\n  const map = this.getMap();\n  map.removeLayer(this.closeLine);\n  this.closeLine = null;\n  // Remove style for the final marker icon\n  this.markers[0].marker.getElement().classList.remove('start-marker');\n  this.setPhase('adjust');\n  map.fire('as:update-ghost-points');\n  this.onPolygonReady();\n  removeEndClickArea(this);\n}\n\nexport function onActivate(event) {\n  // Non-sense, but required on Safari. Probably related to https://github.com/Leaflet/Leaflet/issues/7255\n  if (!event.isTrusted) {\n    return;\n  }\n  event.preventDefault();\n  event.stopPropagation();\n  const map = this.getMap();\n  event.target.blur();\n  // if current state is active, we need to deactivate\n  const activeState = this.options.active || this.phase === 'adjust';\n  if (activeState) {\n    this.deactivate();\n  } else {\n    this.activateButton.classList.add('active');\n    map.getContainer().classList.add('drawing-area');\n    this.setPhase('draw', true);\n  }\n}\n\nexport function onMarkerDrag(index) {\n  const map = this.getMap();\n  return (event) => {\n    const { latlng } = event;\n    requestAnimationFrame(() => {\n      const newPoint = map.latLngToContainerPoint(latlng);\n      const { point } = this.markers[index];\n      point.x = newPoint.x;\n      point.y = newPoint.y;\n      map.fire('as:update-polygon');\n      map.fire('as:update-ghost-points');\n    });\n  };\n}\n\nexport function onGhostMarkerDrag(index) {\n  const map = this.getMap();\n  return (event) => {\n    const { latlng } = event;\n    requestAnimationFrame(() => {\n      // Given a ghost point, markers to be used as edges are the one at +0 and +1\n      const firstPoint = this.markers[index];\n      const lastPoint = this.markers[index + 1] ? this.markers[index + 1] : this.markers[0];\n      if (this.ghostPolygon) {\n        map.removeLayer(this.ghostPolygon);\n      }\n      this.ghostPolygon = new Polygon(\n        [\n          map.containerPointToLatLng(firstPoint.point),\n          latlng,\n          map.containerPointToLatLng(lastPoint.point),\n        ],\n        {\n          color: 'rgb(45, 123, 200)',\n          weight: 2,\n          opacity: 0.5,\n          fillOpacity: 0.1,\n          dashArray: '5, 10',\n        }\n      );\n      map.addLayer(this.ghostPolygon);\n      map.fire('as:update-polygon');\n    });\n  };\n}\n\nexport function onGhostMarkerDragStart() {\n  return (event) => {\n    event.target.getElement().classList.add('active');\n  };\n}\n\nexport function onGhostMarkerDragEnd(index) {\n  const map = this.getMap();\n  return (event) => {\n    const { target } = event;\n    target.getElement().classList.remove('active');\n    target.removeFrom(map);\n    if (this.ghostPolygon) {\n      map.removeLayer(this.ghostPolygon);\n    }\n    const newPoint = map.latLngToContainerPoint(target.getLatLng());\n    const container = map.getContainer();\n    const bbox = container.getBoundingClientRect();\n    const fakeEvent = {\n      clientX: newPoint.x + bbox.left,\n      clientY: newPoint.y + bbox.top,\n      index: index + 1,\n    };\n    map.fire('as:point-add', fakeEvent);\n  };\n}\n","import { DomUtil, Control, Util, Point } from 'leaflet';\nimport { createPane, removeEndClickArea, PANE_NAME } from './drawing-pane';\nimport { cls, setPosition, CLICK_EVT } from './utils';\nimport {\n  onActivate,\n  onAddMarker,\n  onAddPoint,\n  onPolygonCreationEnd,\n  onRemoveMarker,\n  onUpdateGhostPoints,\n  onUpdatePolygon,\n} from './events';\n\n// import buttonImage from './images/area-icon.png';\n\nexport const DrawAreaSelection = Control.extend({\n  options: {\n    // activate automatically area selection on plugin load\n    active: false,\n    // callback called when draw phase is complete and at every polygon adjustement\n    onPolygonReady: (polygon, control) => {},\n    // partially fade the map when draw phase is activated\n    fadeOnActivation: true,\n    // callback called when draw phase is complete and double-click is performed on the final polygon\n    onPolygonDblClick: (polygon, control, event) => {},\n  },\n\n  initialize: function (options = {}) {\n    Util.setOptions(this, options);\n    this._map = null;\n    // lifecycle phases: one of inactive, draw, adjust\n    this.phase = options.active ? 'draw' : 'inactive';\n    this.map_moving = false;\n    // edge markers used for drawing, next dragging the polygon\n    this.markers = [];\n    // fake markers used for adding rings to the polygon\n    this.ghostMarkers = [];\n    // The actual polygon draw\n    this.polygon = null;\n    // on drawing phase: a line from the last drawn point to the first ones\n    this.closeLine = null;\n\n    this._mapMoveStart = this.mapMoveStart.bind(this);\n    this._mapMoveEnd = this.mapMoveEnd.bind(this);\n  },\n\n  onAdd: function (map) {\n    this._container = DomUtil.create('div', cls('leaflet-area-selector-control'));\n    this.activateButton = DomUtil.create('button', '', this._container);\n    // this.activateButton.style.backgroundImage = `url('${buttonImage}')`;\n    this.activateButton.addEventListener(CLICK_EVT, onActivate.bind(this));\n    this.activateButton.addEventListener('dblclick', (event) => {\n      event.stopPropagation();\n    });\n    this.options.active\n      ? this.activateButton.classList.add('active')\n      : this.activateButton.classList.remove('active');\n    this._map = map;\n    createPane(map, this.options);\n    map.on('movestart', this._mapMoveStart);\n    map.on('moveend', this._mapMoveEnd);\n    map.on('as:point-add', onAddPoint.bind(this));\n    map.on('as:marker-add', onAddMarker.bind(this));\n    map.on('as:marker-remove', onRemoveMarker.bind(this));\n    map.on('as:creation-end', onPolygonCreationEnd.bind(this));\n    map.on('as:update-polygon', onUpdatePolygon.bind(this));\n    map.on('as:update-ghost-points', onUpdateGhostPoints.bind(this));\n    return this._container;\n  },\n\n  onRemove: function (map) {\n    map.off('movestart', this._mapMoveStart);\n    map.off('moveend', this._mapMoveEnd);\n    map.off('as:point-add');\n    map.off('as:marker-add');\n    map.off('as:marker-remove');\n    map.off('as:creation-end');\n    map.off('as:update-polygon');\n    map.off('as:update-ghost-points');\n  },\n\n  getMap: function () {\n    return this._map;\n  },\n\n  onPolygonReady: function () {\n    this.options.onPolygonReady(this.polygon, this);\n  },\n\n  onPolygonDblClick: function (ev) {\n    this.options.onPolygonDblClick(this.polygon, this, ev);\n  },\n\n  setPhase(phase, forceClear = false) {\n    this.phase = phase;\n    this.options.active = phase === 'draw';\n    // If we didn't finished to fill a polygon, let's clear all\n    if (forceClear || this.phase === 'draw') {\n      this.clearGhostMarkers();\n      this.clearMarkers();\n      this.clearPolygon();\n    }\n    const pane = this._map.getPane(PANE_NAME);\n    const container = pane.parentNode;\n    this.options.active\n      ? container.classList.remove('inactive')\n      : container.classList.add('inactive');\n  },\n\n  mapMoveStart: function () {\n    this.map_moving = true;\n  },\n\n  mapMoveEnd: function (event) {\n    requestAnimationFrame(() => {\n      this.map_moving = false;\n    });\n    const map = this._map;\n    // Re-position end of selection HTML element\n    const pane = map.getPane(PANE_NAME);\n    const touchMarker = pane.querySelector('.end-selection-area');\n    if (touchMarker) {\n      const firstMarker = this.markers[0].marker;\n      const bbox = touchMarker.getBoundingClientRect();\n      const point = map.latLngToContainerPoint(firstMarker.getLatLng());\n      setPosition(touchMarker, point, new Point(-bbox.width / 2, -bbox.height / 2));\n    }\n    this.translatePolygon();\n  },\n\n  translatePolygon: function () {\n    if (this.markers.length === 0) {\n      return;\n    }\n    const map = this._map;\n    this.markers.forEach((data) => {\n      data.point = map.latLngToContainerPoint(data.marker.getLatLng());\n    });\n    this.ghostMarkers.forEach((data) => {\n      data.point = map.latLngToContainerPoint(data.marker.getLatLng());\n    });\n  },\n\n  hoverClosePoint: function (event) {\n    if (this.markers.length > 2 && this.closeLine) {\n      this.closeLine.removeFrom(this._map);\n    }\n  },\n\n  outClosePoint: function (event) {\n    if (this.closeLine) {\n      this.closeLine.addTo(this._map);\n    }\n  },\n\n  clearMarkers: function () {\n    this.markers.forEach(({ marker }) => {\n      marker.removeFrom(this._map);\n    });\n    this.markers = [];\n  },\n\n  clearGhostMarkers: function () {\n    this.ghostMarkers.forEach(({ marker }) => {\n      marker.removeFrom(this._map);\n    });\n    this.ghostMarkers = [];\n  },\n\n  clearPolygon: function () {\n    this.polygon && this.polygon.removeFrom(this._map);\n    this.polygon = null;\n    this.closeLine && this.closeLine.removeFrom(this._map);\n    this.closeLine = null;\n  },\n\n  deactivate: function () {\n    removeEndClickArea(this);\n    this.activateButton.classList.remove('active');\n    this._map.getContainer().classList.remove('drawing-area');\n    this.setPhase('inactive', true);\n  },\n});\n\nexport const drawAreaSelection = function (options = {}) {\n  return new DrawAreaSelection(options);\n};\n","import { Util, Control } from 'leaflet';\nimport { DrawAreaSelection, drawAreaSelection } from './control';\n\nUtil.extend(Control, {\n  DrawAreaSelection,\n  drawAreaSelection,\n});\n\nexport { DrawAreaSelection, drawAreaSelection };\n","import { Map, Icon, tileLayer, marker, geoJSON } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '@bopen/leaflet-area-selection/dist/index.css';\nimport { DrawAreaSelection } from '@bopen/leaflet-area-selection';\n\nimport './index.css';\n\nimport icon from './B-Open.svg';\n\n// See https://github.com/Leaflet/Leaflet/issues/4968#issuecomment-483402699\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nconst center = [41.901493, 12.5009157];\n\nconst map = new Map('root', {\n  // Fix for a bug in Leaflet 1.7.1. See https://github.com/Leaflet/Leaflet/issues/7255\n  tap: false,\n}).setView(center, 13);\n\ntileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  attribution:\n    '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n}).addTo(map);\n\nconst popup = document.createElement('div');\npopup.innerHTML = `<div style=\"text-align: center; font-size: 120%\">B-Open</div>\n<img alt=\"B-Open logo\" width=\"75\" src=\"${icon}\" />\n`;\n\nmarker(center).addTo(map).bindPopup(popup);\n\nconst areaSelection = new DrawAreaSelection({\n  onPolygonReady: (polygon) => {\n    const preview = document.getElementById('polygon');\n    preview.innerText = JSON.stringify(polygon.toGeoJSON(3), undefined, 2);\n    preview.scrollTop = preview.scrollHeight;\n  },\n  onPolygonDblClick: (polygon, control, ev) => {\n    const geojson = geoJSON(polygon.toGeoJSON(), {\n      style: {\n        opacity: 0.5,\n        fillOpacity: 0.2,\n        color: 'red',\n      },\n    });\n    geojson.addTo(map);\n    control.deactivate();\n  },\n  position: 'topleft',\n});\n\nmap.addControl(areaSelection);\n"],"sourceRoot":""}